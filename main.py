import asyncio
import aiosqlite
import html
import re
import json
import os
import time
import uuid
import logging
import io
from typing import List, Set, Dict, Optional, Deque
from collections import deque
from datetime import datetime, timedelta

import random
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from PIL import Image
from dateutil.relativedelta import relativedelta
from aiohttp import ClientSession
from PyCharacterAI import get_client
from PyCharacterAI.exceptions import SessionClosedError

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatType, ChatMemberStatus, ChatAction
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    CallbackQuery, 
    Message, 
    LabeledPrice, 
    PreCheckoutQuery,
    BufferedInputFile,
    FSInputFile,
    ChatPermissions
)
from aiogram.filters import BaseFilter
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.utils.markdown import hbold
import traceback

logging.basicConfig(level=logging.INFO)

router = Router()

DB_NAME = 'database.db'
REQUIRED_MESSAGES = 1
ADMIN_USER_ID = 7395604316
STICKER_IDS = []

LOCAL_GIFS = {}

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS message_history (
                chat_id INTEGER,
                user_id INTEGER,
                target_user_id INTEGER DEFAULT NULL,
                message_text TEXT,
                timestamp INTEGER,
                PRIMARY KEY (chat_id, timestamp)
            )
        ''')
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS words (
                chat_id INTEGER,
                word TEXT,
                timestamp INTEGER,
                PRIMARY KEY (chat_id, word)
            )
        ''')
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS groups (
                chat_id INTEGER PRIMARY KEY,
                message_count INTEGER DEFAULT 0,
                joined_timestamp INTEGER,
                title TEXT,
                is_active BOOLEAN DEFAULT TRUE
            )
        ''')
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                joined_timestamp INTEGER
            )
        ''')

        await db.execute('''
            CREATE TABLE IF NOT EXISTS media_tracking (
                chat_id INTEGER PRIMARY KEY,
                last_send_timestamp INTEGER
            )
        ''')
        await db.commit()
        
logger = logging.getLogger(__name__)

async def should_send_daily_media(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø—É —Å–µ–≥–æ–¥–Ω—è"""
    current_date = datetime.now().date()
    
    async with aiosqlite.connect(DB_NAME) as db:
        # Get last send timestamp
        cursor = await db.execute(
            'SELECT last_send_timestamp FROM media_tracking WHERE chat_id = ?',
            (chat_id,)
        )
        result = await cursor.fetchone()
        
        if not result:
            return True
            
        last_timestamp = result[0]
        last_date = datetime.fromtimestamp(last_timestamp).date()
        
        return last_date < current_date

async def update_last_media_timestamp(chat_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞"""
    current_timestamp = int(datetime.now().timestamp())
    
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''
            INSERT OR REPLACE INTO media_tracking (chat_id, last_send_timestamp)
            VALUES (?, ?)
        ''', (chat_id, current_timestamp))
        await db.commit()

async def send_random_daily_media(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –º–µ–¥–∏–∞ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        if not await should_send_daily_media(message.chat.id):
            return
            
        # 50/50 chance for sticker or GIF
        if random.random() < 0.5:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞
            sticker_id = random.choice(STICKER_IDS)
            await message.bot.send_sticker(
                chat_id=message.chat.id,
                sticker=sticker_id
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ GIF
            random_gif_path = random.choice(list(LOCAL_GIFS.values()))
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if not os.path.exists(random_gif_path):
                    print(f"File not found: {random_gif_path}")
                    return
                    
                # –°–æ–∑–¥–∞–µ–º FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                gif = FSInputFile(random_gif_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                await message.bot.send_animation(
                    chat_id=message.chat.id,
                    animation=gif
                )
            except Exception as e:
                print(f"Error sending GIF.")
            
        await update_last_media_timestamp(message.chat.id)
        
    except Exception as e:
        print(f"Error sending daily media.")

async def save_message_history(chat_id: int, user_id: int, message_text: str, target_user_id: Optional[int] = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞"""
    current_time = datetime.now()
    current_timestamp = int(current_time.timestamp() * 1000000)

    async with aiosqlite.connect(DB_NAME) as db:
        try:
            await db.execute('''
                INSERT INTO message_history (chat_id, user_id, target_user_id, message_text, timestamp)
                VALUES (?, ?, ?, ?, ?)
            ''', (chat_id, user_id, target_user_id, message_text, current_timestamp))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã
            await db.execute('''
                UPDATE groups 
                SET message_count = message_count + 1 
                WHERE chat_id = ?
            ''', (chat_id,))

            await db.commit()
        except Exception as e:
            if "UNIQUE constraint failed" in str(e):
                current_timestamp += random.randint(1, 1000)
                await db.execute('''
                    INSERT INTO message_history (chat_id, user_id, target_user_id, message_text, timestamp)
                    VALUES (?, ?, ?, ?, ?)
                ''', (chat_id, user_id, target_user_id, message_text, current_timestamp))

                await db.execute('''
                    UPDATE groups 
                    SET message_count = message_count + 1 
                    WHERE chat_id = ?
                ''', (chat_id,))

                await db.commit()
            else:
                raise e

async def save_words(chat_id: int, text: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    words = set(re.findall(r'\b\w+\b', text.lower()))
    current_timestamp = int(datetime.now().timestamp())
    
    async with aiosqlite.connect(DB_NAME) as db:
        for word in words:
            await db.execute('''
                INSERT OR REPLACE INTO words (chat_id, word, timestamp)
                VALUES (?, ?, ?)
            ''', (chat_id, word, current_timestamp))
        await db.commit()

async def get_group_stats(chat_id: int) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä—É–ø–ø—ã"""
    async with aiosqlite.connect(DB_NAME) as db:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        async with db.execute(
            'SELECT message_count FROM groups WHERE chat_id = ?',
            (chat_id,)
        ) as cursor:
            message_count = await cursor.fetchone()
            message_count = message_count[0] if message_count else 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤
        async with db.execute(
            'SELECT COUNT(DISTINCT word) FROM words WHERE chat_id = ?',
            (chat_id,)
        ) as cursor:
            word_count = await cursor.fetchone()
            word_count = word_count[0] if word_count else 0

        return {
            'messages': message_count,
            'words': word_count
        }

@router.my_chat_member()
async def on_chat_member_updated(event: types.ChatMemberUpdated):
    if event.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:

        current_timestamp = int(datetime.now().timestamp())
            
        await event.bot.send_sticker(
            chat_id=event.chat.id,
            sticker="CAACAgIAAxkBAAENh3Jni7bLzswV2_T4tZS8g0u51ftBSwACIlQAAi5qMUhTl9wP9WT12DYE"
        )
                
        await event.bot.send_message(
            chat_id=event.chat.id,
            text=f"""
            ‚ù§Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä—é –∞–¥–º–∏–Ω–∞, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª –º–µ–Ω—è –≤ —Å–≤–æ—é –º–∏–ª—É—é —á–∞—Ç-–≥—Ä—É–ø–ø—É!\n\nüòò –ß—Ç–æ–±—ã —è –Ω–∞—á–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å, –Ω—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º {REQUIRED_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π. –ê –∑–∞—Ç–µ–º —è —É–∂–µ –Ω–∞—á–∏–Ω–∞—é –æ—Ç–≤–µ—á–∞—Ç—å. üíï\n\nüçº –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats ‚Äì –î–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä—É–ø–ø—ã.\nüíû –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help ‚Äì –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—è –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É.
            """
        )

async def get_daily_message_stats(chat_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–Ω—è–º"""
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute('''
            SELECT 
                date(datetime(timestamp/1000000, 'unixepoch')) as date,
                COUNT(*) as message_count
            FROM message_history 
            WHERE chat_id = ?
            GROUP BY date
            ORDER BY date
        ''', (chat_id,)) as cursor:
            daily_stats = await cursor.fetchall()
            return daily_stats

async def create_stats_image(chat_id: int, stats: Dict) -> BufferedInputFile:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    daily_stats = await get_daily_message_stats(chat_id)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    dates = [datetime.strptime(str(row[0]), '%Y-%m-%d') for row in daily_stats]
    counts = [row[1] for row in daily_stats]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(10, 6))
    fig.patch.set_facecolor('#1a1a2e')
    ax.set_facecolor('#1a1a2e')
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –≥—Ä–∞—Ñ–∏–∫–∞
    ax.grid(True, linestyle='--', alpha=0.2, color='#2d374d')
    
    # –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–∏–Ω–∏—é —Å –Ω–µ–æ–Ω–æ–≤—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    ax.plot(dates, counts, '-', color='#00ff9d', linewidth=2, alpha=0.8)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ —Å –Ω–µ–æ–Ω–æ–≤—ã–º —Å–≤–µ—á–µ–Ω–∏–µ–º
    ax.scatter(dates, counts, color='#00ff9d', s=50, alpha=1, 
              zorder=5, edgecolor='white', linewidth=1)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–∏
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
    ax.xaxis.set_major_locator(mdates.AutoDateLocator())
    
    # –°—Ç–∏–ª–∏–∑—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
    ax.tick_params(axis='both', colors='#8884d8')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ –ª–∏–Ω–∏—è–º
    for spine in ax.spines.values():
        spine.set_edgecolor('#8884d8')
        spine.set_linewidth(1)
    
    # –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –¥–∞—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    plt.xticks(rotation=45)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100, bbox_inches='tight',
                facecolor='#1a1a2e', edgecolor='none')
    buf.seek(0)
    plt.close()
    
    # –°–æ–∑–¥–∞–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ aiogram
    return BufferedInputFile(buf.getvalue(), filename="stats.png")

@router.message(Command("stats"))
async def stats_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_group_stats(message.chat.id)
        user_id = message.from_user.id
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞—Ä–∞–Ω–µ–µ
        caption = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:</b>\n"
            f"ü§ç –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: <code>{stats['messages']}</code>\n"
            f"üíå –°–ª–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: <code>{stats['words']}</code>"
        )
        
        if stats['messages'] < REQUIRED_MESSAGES:
            caption += f"\nü§ç –î–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ <b>Mimi Typh</b> –æ—Å—Ç–∞–ª–æ—Å—å: <code>{REQUIRED_MESSAGES - stats['messages']}</code> —Å–æ–æ–±—â–µ–Ω–∏–π."
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = await create_stats_image(message.chat.id, stats)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await message.answer_photo(
                photo=image,
                caption=caption
            )
            
        except Exception as e:
            print(f"Error creating stats image: {e}")
            # –¢–µ–ø–µ—Ä—å caption –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –≤ except –±–ª–æ–∫–µ
            await message.answer(caption)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AdminStates(StatesGroup):
    CONFIRM_USER_DELETE = State()

@router.message(Command("admin"))
async def handle_admin_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if message.from_user.id != ADMIN_USER_ID:
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async with aiosqlite.connect(DB_NAME) as db:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await db.execute("SELECT COUNT(*) FROM users")
        total_users = (await cursor.fetchone())[0]

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        cursor = await db.execute("SELECT COUNT(*) FROM groups WHERE is_active = TRUE")
        active_groups = (await cursor.fetchone())[0]

    text = (
        f"üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{total_users}</code>\n"
        f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: <code>{active_groups}</code>\n\n"
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å DB –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user")]
    ])
    await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data == "admin_delete_user")
async def start_delete_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    await callback.message.answer(
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ:"
    )
    await state.set_state(AdminStates.CONFIRM_USER_DELETE)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(AdminStates.CONFIRM_USER_DELETE)
async def process_user_for_deletion(message: Message, state: FSMContext, bot: Bot):
    user_id = None
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.forward_from:
        user_id = message.forward_from.id
    # –ò–ª–∏ –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –≤—Ä—É—á–Ω—É—é
    elif message.text and message.text.isdigit():
        user_id = int(message.text)
    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await bot.get_chat(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        async with aiosqlite.connect(DB_NAME) as db:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            cursor = await db.execute(
                "SELECT COUNT(*) FROM message_history WHERE user_id = ?",
                (user_id,))
            message_count = (await cursor.fetchone())[0]
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø
            cursor = await db.execute(
                "SELECT COUNT(DISTINCT chat_id) FROM message_history WHERE user_id = ?",
                (user_id,))
            groups_count = (await cursor.fetchone())[0]
            
            # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            cursor = await db.execute(
                "SELECT joined_timestamp FROM users WHERE user_id = ?",
                (user_id,))
            join_data = await cursor.fetchone()
            join_date = datetime.fromtimestamp(join_data[0]).strftime('%d.%m.%Y') if join_data else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        user_card = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"üÜî ID: <code>{user_id}</code>\n"
            f"üìõ –ò–º—è: {html.escape(user.first_name)}\n"
            f"üë§ Username: @{user.username if user.username else '–Ω–µ—Ç'}\n"
            f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {join_date}\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
            f"üí¨ –ì—Ä—É–ø–ø: {groups_count}\n\n"
            f"<b>‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!</b>"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
                    callback_data=f"confirm_delete_{user_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_delete"
                )
            ]
        ])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(user_id=user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await message.answer(user_card, reply_markup=keyboard)
        
    except Exception as e:
        error_msg = (
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            f"<code>{html.escape(str(e))}</code>\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        )
        await message.answer(error_msg)
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_user_deletion(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.from_user.id != ADMIN_USER_ID:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    user_id = int(callback.data.split("_")[2])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        user = await bot.get_chat(user_id)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with aiosqlite.connect(DB_NAME) as db:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            await db.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
            await db.execute("DELETE FROM message_history WHERE user_id = ?", (user_id,))
            await db.execute("DELETE FROM last_button_press WHERE user_id = ?", (user_id,))
            await db.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            cursor = await db.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
            if await cursor.fetchone():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_msg = (
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
            f"üìõ –ò–º—è: {html.escape(user.first_name)}\n"
            f"üë§ Username: @{user.username if user.username else '–Ω–µ—Ç'}\n\n"
            f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await callback.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await callback.message.answer(success_msg)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({user.first_name})")
        
    except Exception as e:
        error_msg = (
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>:\n"
            f"<code>{html.escape(str(e))}</code>"
        )
        await callback.message.edit_text(error_msg)
    
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_delete")
async def cancel_user_deletion(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback.answer()

standard_triggers = {'–º–∏–º–∏', 'mimi', '–ú–ò–ú–ò', 'MIMI', '–ú–∏–º–∏', 'Mimi'}

class MessageTracker:
    def __init__(self, message_limit: int = 3, time_window: int = 5):
        self.message_limit = message_limit
        self.time_window = time_window  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.user_messages: Dict[int, deque] = {}
        
    def is_spam(self, user_id: int) -> bool:
        if user_id not in self.user_messages:
            self.user_messages[user_id] = deque()
            
        messages = self.user_messages[user_id]
        current_time = datetime.now()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
        while messages and (current_time - messages[0]) > timedelta(seconds=self.time_window):
            messages.popleft()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(messages) >= self.message_limit:
            logger.warning(f"Spam detected from user {user_id}: {len(messages)} messages in {self.time_window} seconds")
            return True
            
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        messages.append(current_time)
        return False

class ConnectionPool:
    def __init__(self, api_key: str, pool_size: int = 5):
        self.api_key = api_key
        self.pool_size = pool_size
        self.connections: List = []  # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç—ã –Ω–æ–≤–æ–π API
        self.locks: List[asyncio.Lock] = []
        self.initialized = False
        self.init_lock = asyncio.Lock()
        
    async def initialize(self):
        if self.initialized:
            return
            
        async with self.init_lock:
            if self.initialized:  # Double check
                return
                
            for _ in range(self.pool_size):
                client = await get_client(token=self.api_key)
                await client.account.fetch_me()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                self.connections.append(client)
                self.locks.append(asyncio.Lock())
                
            self.initialized = True
            logger.info(f"Initialized connection pool with {self.pool_size} connections")
    
    async def get_connection(self):
        await self.initialize()
        
        while True:
            for i, lock in enumerate(self.locks):
                if not lock.locked():
                    return i, self.connections[i], lock
            await asyncio.sleep(0.1)

class ChatManager:
    def __init__(self, api_key: str, char_id: str, pool_size: int = 5, 
                 min_delay: float = 3.0, max_delay: float = 5.0,
                 message_limit: int = 3, time_window: int = 5):
        self.char_id = char_id
        self.pool = ConnectionPool(api_key, pool_size)
        self.user_chats: Dict[int, dict] = {}
        self.chat_locks: Dict[int, asyncio.Lock] = {}
        self.min_delay = min_delay
        self.max_delay = max_delay
        self.message_tracker = MessageTracker(message_limit, time_window)

    async def send_message(self, user_id: int, message: str) -> str:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
        if self.message_tracker.is_spam(user_id):
            logger.warning(f"Ignoring message from user {user_id} due to spam protection")
            return None
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        delay = random.uniform(self.min_delay, self.max_delay)
        logger.info(f"Waiting {delay:.1f} seconds before processing message for user {user_id}")
        await asyncio.sleep(delay)
        
        # –°–æ–∑–¥–∞–µ–º lock –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in self.chat_locks:
            self.chat_locks[user_id] = asyncio.Lock()
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
            conn_id, client, conn_lock = await self.pool.get_connection()
            
            async with conn_lock:  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user_id not in self.user_chats:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –Ω–æ–≤–æ–π API
                        chat, greeting_message = await client.chat.create_chat(self.char_id)
                        self.user_chats[user_id] = {
                            'chat_id': chat.chat_id,
                            'last_activity': datetime.now()
                        }
                        logger.info(f"Created new chat for user {user_id}")
                    
                    chat_data = self.user_chats[user_id]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π API
                    answer = await client.chat.send_message(
                        self.char_id,
                        chat_data['chat_id'],
                        message
                    )
                    
                    chat_data['last_activity'] = datetime.now()
                    return answer.get_primary_candidate().text
                    
                except SessionClosedError as e:
                    logger.error(f"Session closed for user {user_id}: {e}")
                    # –£–¥–∞–ª—è–µ–º —á–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –æ–Ω –ø–µ—Ä–µ—Å–æ–∑–¥–∞–ª—Å—è
                    if user_id in self.user_chats:
                        del self.user_chats[user_id]
                    raise
                except Exception as e:
                    logger.error(f"Error in connection {conn_id} for user {user_id}: {e}")
                    if user_id in self.user_chats:
                        del self.user_chats[user_id]
                    raise
                    
        except Exception as e:
            logger.error(f"Failed to send message for user {user_id}: {e}")
            raise

    async def close(self):
        for client in self.pool.connections:
            await client.close_session()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–∞—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ API
chat_manager = ChatManager(
    api_key='4d9f28f3e0446491d0b99e135e68e85f040f33aa',  # –í–∞—à –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    char_id='cYXxq0NFDa8lHhgtiAdv-9a534eDWbg-YiUtIfX7yoE'  # –í–∞—à –Ω–æ–≤—ã–π character_id
)

async def ensure_group_exists(chat_id: int, chat_title: str) -> None:
    """Check if group exists in database and create if not"""
    current_timestamp = int(datetime.now().timestamp())
    
    async with aiosqlite.connect(DB_NAME) as db:
        # Check if group exists
        cursor = await db.execute('SELECT chat_id FROM groups WHERE chat_id = ?', (chat_id,))
        existing_group = await cursor.fetchone()
        
        if not existing_group:
            # If group doesn't exist, create new entry
            await db.execute('''
                INSERT INTO groups 
                (chat_id, message_count, joined_timestamp, title, is_active)
                VALUES (?, 0, ?, ?, TRUE)
            ''', (chat_id, current_timestamp, chat_title))
            await db.commit()

@router.message(F.chat.type == ChatType.PRIVATE)
async def private_message_handler(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="ü¶¥ –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É",
                    url=f"https://t.me/MimiTyph_sBot?startgroup=true"
                )
            ]
        ]
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    current_timestamp = int(datetime.now().timestamp())
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute('''
            INSERT OR IGNORE INTO users (user_id, username, joined_timestamp)
            VALUES (?, ?, ?)
        ''', (message.from_user.id, message.from_user.username, current_timestamp))
        await db.commit()

    # –°–æ–∑–¥–∞–µ–º FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    animation = FSInputFile("/root/Mimi/start.mp4")
    
    await message.answer_animation(
        animation=animation,
        caption=(
            "ü©∑ –ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π! –ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–ú–∏–º–∏ üçº</b>, –∏ —è –æ—á–µ–Ω—å —Ä–∞–¥–∞ –±—ã—Ç—å "
            "–¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –≤ —Ç–≤–æ—é –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—É—é —á–∞—Ç-–≥—Ä—É–ø–ø—É.\n\n"
            "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –∫–æ—Ç–æ—Ä—ã–π <b>–≤—Å–µ –±—É–¥—É—Ç –ª—é–±–∏—Ç—å!</b> üíï \n\n"
            "<i>PS: –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ–∂–∞–µ—Ç–µ —Å <a href='https://telegra.ph/Politika-Konfidencialnosti-i-Usloviya-Ispolzovaniya-03-27'>–£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</a></i>"
        ), reply_markup=keyboard
    )


@router.message(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
async def group_message_handler(message: types.Message, bot: Bot):
    if not message.text:
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ –ë–î
        async with aiosqlite.connect('database.db') as db:
            cursor = await db.execute(
                'SELECT 1 FROM groups WHERE chat_id = ?',
                (message.chat.id,)
            )
            group_exists = await cursor.fetchone()
            
            if not group_exists:
                # –ì—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –ë–î - –¥–æ–±–∞–≤–ª—è–µ–º
                await db.execute(
                    'INSERT INTO groups (chat_id, title, created_at) VALUES (?, ?, datetime("now"))',
                    (message.chat.id, message.chat.title)
                )
                await db.commit()
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –≤ –ë–î: {message.chat.title} (ID: {message.chat.id})")

        await ensure_group_exists(message.chat.id, message.chat.title)
        await save_message_history(message.chat.id, message.from_user.id, message.text)
        await save_words(message.chat.id, message.text)

        stats = await get_group_stats(message.chat.id)
        
        async with aiosqlite.connect('database.db') as db:
            cursor = await db.execute(
                'SELECT is_active FROM group_modules WHERE group_id = ? AND module_name = "triggers"',
                (message.chat.id,)
            )
            triggers_module_active = await cursor.fetchone()
            
            triggers = standard_triggers.copy()
            
            cursor = await db.execute(
                'SELECT response_chance FROM group_config WHERE chat_id = ?',
                (message.chat.id,)
            )
            chance_row = await cursor.fetchone()
            response_chance = chance_row[0]/100 if chance_row else 0.01

        message_words = set(message.text.lower().split())
        should_respond = any(trigger.lower() in message_words for trigger in triggers)
        is_reply_to_bot = message.reply_to_message and message.reply_to_message.from_user.id == message.bot.id
        
        async with aiosqlite.connect('database.db') as db:
            cursor = await db.execute(
                'SELECT response_chance FROM group_config WHERE chat_id = ?',
                (message.chat.id,)
            )
            chance_row = await cursor.fetchone()
            response_chance = chance_row[0]/100 if chance_row else 0.01

        random_response_chance = random.random() < response_chance
        
        if should_respond or is_reply_to_bot or random_response_chance:
            if stats['messages'] < REQUIRED_MESSAGES:
                await message.reply(
                    f"‚ô° –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Mimi Typh –Ω—É–∂–Ω–æ {REQUIRED_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π. "
                    f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {stats['messages']}/{REQUIRED_MESSAGES} ‚Äπùüπ"
                )
                return

            typing_task = None
            try:
                INITIAL_DELAY = random.uniform(0.3, 1.5)
                MIN_TYPING_TIME = 1.5
                BASE_CHAR_DELAY = 0.05
                TYPING_VARIABILITY = 0.03
                THINKING_PAUSE_CHANCE = 0.15
                THINKING_PAUSE_DURATION = (0.8, 2.0)
                
                await asyncio.sleep(INITIAL_DELAY)

                async def realistic_typing():
                    try:
                        last_action_time = time.time()
                        while True:
                            current_time = time.time()
                            elapsed = current_time - last_action_time
                            
                            if random.random() < THINKING_PAUSE_CHANCE:
                                pause = random.uniform(*THINKING_PAUSE_DURATION)
                                await asyncio.sleep(pause)
                                last_action_time = time.time()
                                continue
                            
                            await message.bot.send_chat_action(message.chat.id, "typing")
                            
                            delay = random.uniform(2.5, 4.5)
                            await asyncio.sleep(delay)
                            last_action_time = time.time()
                            
                    except asyncio.CancelledError:
                        pass

                typing_task = asyncio.create_task(realistic_typing())
                
                start_time = time.time()
                
                response = await chat_manager.send_message(
                    user_id=message.from_user.id,
                    message=message.text
                )
                
                if response:
                    base_typing_time = len(response) * (BASE_CHAR_DELAY + random.uniform(-TYPING_VARIABILITY, TYPING_VARIABILITY))
                    
                    if len(response.split()) > 5:
                        base_typing_time += random.uniform(0.5, 1.5) * (len(response.split()) // 8)
                    
                    typing_duration = max(MIN_TYPING_TIME, base_typing_time)
                else:
                    typing_duration = MIN_TYPING_TIME
                
                elapsed = time.time() - start_time
                if elapsed < typing_duration:
                    remaining_delay = typing_duration - elapsed
                    
                    while remaining_delay > 0:
                        chunk = min(remaining_delay, random.uniform(0.7, 1.8))
                        await asyncio.sleep(chunk)
                        remaining_delay -= chunk
                        
                        if remaining_delay > 0.5 and random.random() < 0.3:
                            await asyncio.sleep(random.uniform(0.2, 0.7))
                            remaining_delay -= 0.7

                if response:
                    await save_message_history(
                        chat_id=message.chat.id,
                        user_id=0,
                        message_text=response,
                        target_user_id=message.from_user.id
                    )
                    
                    async with aiosqlite.connect(DB_NAME) as db:
                        analysis_delay = random.uniform(0.4, 1.2)
                        await asyncio.sleep(analysis_delay)
                        
                        cursor = await db.execute('''
                            SELECT message_text 
                            FROM message_history 
                            WHERE chat_id = ? 
                            AND user_id = 0
                            ORDER BY timestamp DESC 
                            LIMIT 5
                        ''', (message.chat.id,))
                        history = await cursor.fetchall()

                    await asyncio.sleep(random.uniform(0.05, 0.3))
                    await message.reply(
                        text=html.escape(response)
                    )

                await send_random_daily_media(message)
        
            except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            finally:
                if typing_task and not typing_task.done():
                    typing_task.cancel()
                    try:
                        await typing_task
                    except:
                        pass
                
                await asyncio.sleep(0.1)
                await message.bot.send_chat_action(message.chat.id, "cancel")

    except Exception as e:
        error_id = str(uuid.uuid4())[:8]
        error_trace = traceback.format_exc()
        
        logger.error(f"Error #{error_id}: {str(e)}\n{error_trace}")
        
        await message.answer(
            f"<i>~–û–π, –∫–∞–∂–µ—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ #{error_id}. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.</i>"
        )
        
        if ADMIN_USER_ID:
            error_card = (
                f"üö® <b>New Error #{error_id}</b>\n\n"
                f"üÜî <b>Chat ID</b>: {message.chat.id}\n"
                f"üë§ <b>User</b>: @{message.from_user.username}\n"
                f"üìù <b>Message</b>: {message.text[:200]}\n\n"
                f"üîß <b>Error</b>:\n<code>{str(e)[:1000]}</code>"
            )
            
            try:
                await bot.send_message(
                    chat_id=ADMIN_USER_ID,
                    text=error_card
                )
                
                if len(error_trace) > 1000:
                    with io.StringIO(error_trace) as trace_file:
                        trace_file.name = f"error_{error_id}_traceback.txt"
                        await bot.send_document(
                            chat_id=ADMIN_USER_ID,
                            document=trace_file,
                            caption=f"Full traceback for error #{error_id}"
                        )
            except Exception as admin_e:
                logger.error(f"Failed to send error notification: {admin_e}")

async def main():
    await init_db()
    bot = Bot(
        token="8148475045:AAFq-CpuOLoidWwMZzFNCvbenB3mmy6fnKg",
        default=DefaultBotProperties(parse_mode="HTML")
    )
    
    dp = Dispatcher()
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    
    try:
        await dp.start_polling(bot, 
            drop_pending_updates=True,
            timeout=30)
    finally:
        await bot.session.close()
        await chat_manager.close()

if __name__ == "__main__":
    asyncio.run(main())